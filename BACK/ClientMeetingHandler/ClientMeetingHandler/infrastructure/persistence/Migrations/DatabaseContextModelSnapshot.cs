// <auto-generated />
using System;
using ClientMeetingHandler.infrastructure.persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClientMeetingHandler.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ClientMeetingHandler.domain.entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .HasDatabaseName("IX_Client_Id");

                    b.HasIndex("Id", "ContactId")
                        .HasDatabaseName("IX_Contact_Client_Id");

                    b.ToTable("Clients", "ClientMeetingHandler");
                });

            modelBuilder.Entity("ClientMeetingHandler.domain.entities.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.HasIndex("Email")
                        .HasDatabaseName("IX_Contact_Email");

                    b.HasIndex("Id")
                        .HasDatabaseName("IX_Contact_Id");

                    b.ToTable("Contacts", "ClientMeetingHandler");
                });

            modelBuilder.Entity("ClientMeetingHandler.domain.entities.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .HasDatabaseName("IX_Location_Id");

                    b.ToTable("Locations", "ClientMeetingHandler");
                });

            modelBuilder.Entity("ClientMeetingHandler.domain.entities.Meeting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Duration")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("Id")
                        .HasDatabaseName("IX_Meeting_Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("Id", "ClientId")
                        .HasDatabaseName("IX_Client_Meeting_Id");

                    b.HasIndex("Id", "LocationId")
                        .HasDatabaseName("IX_Localization_Meeting_Id");

                    b.HasIndex("Id", "ClientId", "LocationId")
                        .HasDatabaseName("IX_Client_Localization_Meeting_Id");

                    b.ToTable("Meetings", "ClientMeetingHandler");
                });

            modelBuilder.Entity("ClientMeetingHandler.domain.entities.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("NoteType")
                        .HasColumnType("int");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .HasDatabaseName("IX_Note_Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("Notes", "ClientMeetingHandler");
                });

            modelBuilder.Entity("ClientMeetingHandler.domain.entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("ServiceTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("Id")
                        .HasDatabaseName("IX_Service_Id");

                    b.HasIndex("ServiceTypeId");

                    b.HasIndex("Id", "ServiceTypeId")
                        .HasDatabaseName("IX_ServiceType_Service_Id");

                    b.ToTable("Services", "ClientMeetingHandler");
                });

            modelBuilder.Entity("ClientMeetingHandler.domain.entities.ServiceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Price")
                        .HasMaxLength(10)
                        .HasColumnType("float");

                    b.Property<int>("Sessions")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .HasDatabaseName("IX_ServiceType_Id");

                    b.ToTable("ServiceTypes", "ClientMeetingHandler");
                });

            modelBuilder.Entity("ClientMeetingHandler.domain.entities.Contact", b =>
                {
                    b.HasOne("ClientMeetingHandler.domain.entities.Client", "Client")
                        .WithOne("Contact")
                        .HasForeignKey("ClientMeetingHandler.domain.entities.Contact", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("ClientMeetingHandler.domain.entities.Meeting", b =>
                {
                    b.HasOne("ClientMeetingHandler.domain.entities.Client", "Client")
                        .WithMany("Meetings")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClientMeetingHandler.domain.entities.Location", "Location")
                        .WithMany("Meetings")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("ClientMeetingHandler.domain.entities.Note", b =>
                {
                    b.HasOne("ClientMeetingHandler.domain.entities.Service", "Service")
                        .WithMany("Notes")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("ClientMeetingHandler.domain.entities.Service", b =>
                {
                    b.HasOne("ClientMeetingHandler.domain.entities.Client", null)
                        .WithMany("Services")
                        .HasForeignKey("ClientId");

                    b.HasOne("ClientMeetingHandler.domain.entities.ServiceType", "ServiceType")
                        .WithMany()
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("ClientMeetingHandler.domain.entities.Client", b =>
                {
                    b.Navigation("Contact")
                        .IsRequired();

                    b.Navigation("Meetings");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("ClientMeetingHandler.domain.entities.Location", b =>
                {
                    b.Navigation("Meetings");
                });

            modelBuilder.Entity("ClientMeetingHandler.domain.entities.Service", b =>
                {
                    b.Navigation("Notes");
                });
#pragma warning restore 612, 618
        }
    }
}
